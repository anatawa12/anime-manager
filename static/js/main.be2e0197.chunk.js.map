{"version":3,"sources":["AnimeTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodayDivider","TableRow","TableCell","colSpan","className","SingleAnime","props","React","useState","open","setOpen","deleteDialog","setDeleteDialog","Button","onClick","animeInfo","name","number","format","available","FormControlLabel","control","Checkbox","checked","watched","onChange","e","markWatched","target","label","Dialog","DialogTitle","DialogContent","FormControl","sx","m","width","TextField","size","fullWidth","value","updateAnimeInfo","DatePicker","start","mask","renderInput","params","first","Number","inputProps","inputMode","pattern","intervalDays","DialogActions","delete","AnimeTable","state","showAll","id","this","setInfo","old","newObj","Object","assign","info","alreadyWatched","has","add","today","endOfDay","Date","anime","result","create","computeAvailableDate","index","addDays","entries","map","Map","theDayNextWillBeReleased","set","type","array","Array","from","values","compareAsc","push","sortAnime","allNumbers","computeAnimeNumbers","shown","numbers","animeNumber","todayAnimeMarker","flatMap","it","encode","crypto","getRandomValues","Uint8Array","buffer","keys","length","startOfDay","Set","console","log","allAnimeNumbers","computeAllAnime","computeNotWatchedAnime","LocalizationProvider","dateAdapter","DateAdapter","locale","jaLocale","Switch","_","all","setState","Table","TableHead","TableBody","bind","deleteAnime","addNewAnime","sort","a","b","compareDesc","Component","localStorageKey","todayStart","isInt","isSafeInteger","isString","App","text","serialized","JSON","parse","stringToBits","error","bits","paddedLen","Math","ceil","bytes","decode","padEnd","bitCnt","i","floor","deserialize","localStorage","getItem","allAnimeInfo","setAllAnimeInfo","setItem","bitsToString","stringify","bit","byte","resize","replace","least","newArray","serialize","CssBaseline","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6hBA8QA,SAASA,IACL,OAAO,cAACC,EAAA,EAAD,UACH,cAACC,EAAA,EAAD,CAAWC,QAAS,EAApB,SACI,qBAAKC,UAAW,cAAhB,8BAOZ,SAASC,EAAYC,GACjB,MAAwBC,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwCH,IAAMC,UAAS,GAAvD,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,OAAO,eAACX,EAAA,EAAD,WACH,cAACC,EAAA,EAAD,CAAWE,UAAW,aAAtB,SACI,cAACS,EAAA,EAAD,CACIT,UAAW,WACXU,QAAS,kBAAMJ,GAAQ,IAF3B,SAII,cAAC,IAAD,QAGR,cAACR,EAAA,EAAD,UAAYI,EAAMS,UAAUC,OAC5B,eAACd,EAAA,EAAD,WAAYI,EAAMW,OAAlB,YACA,cAACf,EAAA,EAAD,UAAYgB,YAAOZ,EAAMa,UAAW,gBACpC,cAACjB,EAAA,EAAD,UACI,cAACkB,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,CACvBC,QAASjB,EAAMkB,QACfC,SAAU,SAACC,GAAD,OAAOpB,EAAMqB,YAAYD,EAAEE,OAAOL,YAC5CM,MAAO,+BAEf,eAACC,EAAA,EAAD,CAAQrB,KAAMA,EAAd,UACI,eAACsB,EAAA,EAAD,mBAAmBzB,EAAMS,UAAUC,QACnC,cAACgB,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACIC,GAAI,CAAC,kBAAmB,CAAEC,EAAG,EAAGC,MAAO,SAD3C,UAGI,cAACC,EAAA,EAAD,CACIC,KAAM,QACNC,WAAS,EACTV,MAAO,eACPW,MAAOlC,EAAMS,UAAUC,KACvBS,SAAU,SAACC,GAAD,OACNpB,EAAMmC,gBAAgB,CAACzB,KAAMU,EAAEE,OAAOY,WAE9C,cAACE,EAAA,EAAD,CACIjB,SAAU,SAACkB,GAAD,OAAWrC,EAAMmC,gBAAgB,CAACE,MAAOA,KACnDC,KAAM,aACNJ,MAAOlC,EAAMS,UAAU4B,MACvBE,YAAa,SAACC,GAAD,OAAY,cAACT,EAAA,EAAD,2BACjBS,GADiB,IAErBR,KAAM,QACNC,WAAS,EACTV,MAAO,uCAGf,cAACQ,EAAA,EAAD,CACIC,KAAM,QACNC,WAAS,EACTV,MAAO,eACPW,MAAOlC,EAAMS,UAAUgC,MACvBtB,SAAU,SAACC,GAAD,OACNpB,EAAMmC,gBAAgB,CAACM,MAAOC,OAAOtB,EAAEE,OAAOY,UAClDS,WAAY,CACRC,UAAW,UACXC,QAAS,YAGjB,cAACd,EAAA,EAAD,CACIC,KAAM,QACNC,WAAS,EACTV,MAAO,eACPW,MAAOlC,EAAMS,UAAUqC,aACvB3B,SAAU,SAACC,GAAD,OACNpB,EAAMmC,gBAAgB,CAACW,aAAcJ,OAAOtB,EAAEE,OAAOY,UACzDS,WAAY,CACRC,UAAW,UACXC,QAAS,iBAKzB,eAACE,EAAA,EAAD,WACI,cAACxC,EAAA,EAAD,CAAQC,QAAS,kBAAMF,GAAgB,IAAvC,0BAGA,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMJ,GAAQ,IAA/B,gCAGA,eAACoB,EAAA,EAAD,CAAQrB,KAAME,EAAd,UACI,eAACoB,EAAA,EAAD,WAAczB,EAAMS,UAAUC,KAA9B,sDACA,eAACqC,EAAA,EAAD,WACI,cAACxC,EAAA,EAAD,CAAQC,QAAS,kBAAMR,EAAMgD,UAA7B,0BAGA,cAACzC,EAAA,EAAD,CAAQC,QAAS,kBAAMJ,GAAQ,IAA/B,2DAUT6C,M,kDAnTX,WAAYjD,GAAyB,IAAD,8BAChC,cAAMA,IACDkD,MAAQ,CACTC,SAAS,GAHmB,E,+CAOpC,SAAYC,GACRC,KAAKrD,MAAMsD,SAAQ,SAACC,GAChB,IAAMC,EAASC,OAAOC,OAAO,GAAoBH,GAEjD,cADOC,EAAOJ,GACPI,O,6BAIf,SAAgBJ,EAAYO,GACxBN,KAAKrD,MAAMsD,SAAQ,SAACC,GAChB,OAAe,MAAXA,EAAIH,GAAoBG,EACrB,2BACAA,GADP,kBAEKH,EAAKK,OAAOC,OAAOH,EAAIH,GAAKO,U,yBAKzC,SAAYP,EAAYzC,EAAgBO,GACpCmC,KAAKrD,MAAMsD,SAAQ,SAACC,GAChB,GAAe,MAAXA,EAAIH,GAAa,OAAOG,EAC5B,IAAM9C,EAAY8C,EAAIH,GAChBQ,EAAiBnD,EAAUS,QAAQ2C,IAAIlD,GAC7C,OAAIO,IAAY0C,EAAuBL,GACnCrC,EACAT,EAAUS,QAAQ4C,IAAInD,GAEtBF,EAAUS,QAAQ8B,OAAOrC,GACtB,2BACA4C,GADP,kBAEKH,EAAK3C,U,iCASlB,WACI,IAAMsD,EAAQC,YAAS,IAAIC,MACrBC,EAAQb,KAAKrD,MAAM2D,KACnBQ,EAA8CV,OAAOW,OAAO,MAElE,SAASC,EAAqBC,EAAeX,GACzC,OAAOY,YAAQZ,EAAKtB,MAAOiC,EAAQX,EAAKb,cAG5C,cAAuBW,OAAOe,QAAQN,GAAtC,eAA8C,CAAzC,IAAyC,EAAzC,sBAAKd,EAAL,KAASO,EAAT,KACKc,EAAM,IAAIC,IACVC,EAA2BJ,YAAQR,EAAOJ,EAAKb,cAFX,cAItBa,EAAKzC,SAJiB,IAI1C,2BAAkC,CAAC,IAAxBoD,EAAuB,QAC9BG,EAAIG,IAAIN,EAAO,CACXlB,KAAIkB,QAAOX,OACXkB,KAAM,QACNhE,UAAWwD,EAAqBC,EAAOX,GACvCzC,SAAS,KATyB,8BAe1C,IAFA,IAAM4D,EAA6BC,MAAMC,KAAKP,EAAIQ,UAEzCX,EAAQ,GAAKA,IAAS,CAC3B,IAAMzD,EAAYwD,EAAqBC,EAAOX,GAC9C,GAAIuB,YAAWrE,EAAW8D,GAA4B,EAAG,MACrDF,EAAIZ,IAAIS,IACZQ,EAAMK,KAAK,CACP/B,KAAIkB,QAAOX,OAAM9C,YACjBgE,KAAM,QACN3D,SAAS,IAGjB+B,EAAWmC,UAAUN,GAErBX,EAAOf,GAAM0B,EAEjB,OAAOX,I,oCAQX,WAGI,IAFA,IAAMkB,EAAahC,KAAKiC,sBAClBC,EAAoD,GAC1D,MAAoB9B,OAAOwB,OAAOI,GAAlC,eAA+C,CAAC,IAAD,MAAtCG,EAAO,KAA+B,cACjBA,GADiB,IAC3C,2BAAmC,CAAC,IAAzBC,EAAwB,QAC1BA,EAAYvE,SACbqE,EAAMJ,KAAKM,IAHwB,+BAM3C,UAAID,EAAQ,UAAZ,aAAI,EAAYtE,UAASqE,EAAMJ,KAAKK,EAAQ,KAC5C,UAAIA,EAAQ,UAAZ,aAAI,EAAYtE,UAASqE,EAAMJ,KAAKK,EAAQ,IAIhD,OAFAD,EAAMJ,KAAKlC,EAAWyC,oBACtBzC,EAAWmC,UAAUG,GACdA,I,6BAGX,WACI,IAAMF,EAAahC,KAAKiC,sBAClBC,EAAoD9B,OAAOwB,OAAOI,GAAYM,SAAQ,SAAAC,GAAE,OAAIA,KAGlG,OAFAL,EAAMJ,KAAKlC,EAAWyC,oBACtBzC,EAAWmC,UAAUG,GACdA,I,yBAWX,WAEIlC,KAAKrD,MAAMsD,SAAQ,SAACC,GAChB,IAAIH,EACJ,GAAGA,EAeIyC,YAAOC,OAAOC,gBAAgB,IAAIC,WAAW,IAAIC,cAdtC,MAAX1C,EAAIH,IAEX,OAAO,2BACAG,GADP,kBAEKH,EAAK,CACF1C,KAAK,qBAAD,OAAQ+C,OAAOyC,KAAK3C,GAAK4C,OAAS,GACtC9D,MAAO+D,YAAW,IAAInC,MACtBxB,MAAO,EACPK,aAAc,EACd5B,QAAS,IAAImF,Y,oBAS7B,WAAU,IAAD,OACLC,QAAQC,IAAIlD,KAAKrD,MAAM2D,MAEvB,IAAM6C,EAAkBnD,KAAKH,MAAMC,QAC7BE,KAAKoD,kBACLpD,KAAKqD,yBAEX,OAAO,mCACH,cAACC,EAAA,EAAD,CAAsBC,YAAaC,IAAaC,OAAQC,IAAxD,SACI,sBAAKjH,UAAW,aAAhB,UACI,cAACgB,EAAA,EAAD,CACIC,QAAS,cAACiG,EAAA,EAAD,CACL/F,QAASoC,KAAKH,MAAMC,QACpBhC,SAAU,SAAC8F,EAAGC,GAAJ,OAAY,EAAKC,SAAS,CAAChE,QAAS+D,OAElD3F,MAAO,mCAEX,eAAC6F,EAAA,EAAD,CAAOpF,KAAM,QAAb,UACI,cAACqF,EAAA,EAAD,UACI,eAAC1H,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,iCACA,cAACA,EAAA,EAAD,2BACA,cAACA,EAAA,EAAD,iCACA,cAACA,EAAA,EAAD,4CAGR,cAAC0H,EAAA,EAAD,UACKd,EAAgB/B,KAAI,SAAAgB,GACjB,MAAyB,iBAArBA,EAAYZ,KACL,cAACnF,EAAD,mBAEA,cAACK,EAAD,CAEHY,OAAQ8E,EAAYnB,MAAQmB,EAAY9B,KAAKlB,MAC7C5B,UAAW4E,EAAY5E,UACvBJ,UAAWgF,EAAY9B,KACvBxB,gBAAiB,EAAKA,gBAAgBoF,KAAK,EAAM9B,EAAYrC,IAC7DlC,QAASuE,EAAYvE,QACrBG,YAAa,EAAKA,YAAYkG,KAAK,EAAM9B,EAAYrC,GAAIqC,EAAYnB,OACrEtB,OAAQ,EAAKwE,YAAYD,KAAK,EAAM9B,EAAYrC,KAR7C,UACKqC,EAAYrC,GADjB,YACuBqC,EAAYnB,gBAa1D,cAAC/D,EAAA,EAAD,CAAQC,QAAS6C,KAAKoE,YAAYF,KAAKlE,MAAvC,yB,wBAxJhB,SAAiByB,GACbA,EAAM4C,MAAK,SAACC,EAAGC,GAAJ,OAAUC,YAAYF,EAAE9G,UAAW+G,EAAE/G,gB,8BA0EpD,WAEI,MAAO,CACHgE,KAAM,eACNhE,UAHUmD,YAAS,IAAIC,W,GAvHVhE,IAAM6H,W,kBC9DzBC,EAAkB,iBAUlBC,EAAa5B,YAAW,IAAInC,MAuClC,IAAMgE,EAAQ,SAAC/F,GAAD,MAAiD,iBAATA,GAAqBQ,OAAOwF,cAAchG,IAC1FiG,EAAW,SAACjG,GAAD,MAAiD,iBAATA,GAyE1CkG,MA/Bf,WACI,MAAwCnI,IAAMC,UAAuB,wBAzCzE,SAAqBmI,GACjB,IAII,IAHA,IAAMC,EAAkBC,KAAKC,MAAMH,GAC7BlE,EAAuB,GAE7B,MAAwBV,OAAOe,QAAa8D,GAA5C,eAAyD,CAApD,0BAAKlF,EAAL,KAASlB,EAAT,KACGiG,EAASjG,EAAMxB,OACZyH,EAASjG,EAAMG,QACf4F,EAAM/F,EAAMO,QACZwF,EAAM/F,EAAMY,eACZqF,EAASjG,EAAMhB,WAClBiD,EAAOf,GAAM,CACT1C,KAAMwB,EAAMxB,KACZ2B,MAAOmG,YAAMtG,EAAMG,MAAO,WAAY2F,GACtCvF,MAAOP,EAAMO,MACbK,aAAcZ,EAAMY,aACpB5B,QAASuH,EAAavG,EAAMhB,WAKxC,OAAOiD,EACT,MAAO/C,GAEL,OADAkF,QAAQoC,MAAMtH,GACP,GAGX,SAASqH,EAAaJ,GAMlB,IALA,IAAMM,EAAO,IAAItC,IACXuC,EAAyC,EAA7BC,KAAKC,KAAKT,EAAKlC,OAAS,GACtC4C,EAAQ,IAAI/C,WAAWgD,YAAOX,EAAKY,OAAOL,EAAW,OACnDM,EAAwB,EAAfH,EAAM5C,OAEZgD,EAAI,EAAGA,EAAID,EAAQC,IAC+B,KAAlDJ,EAAMF,KAAKO,MAAMD,EAAI,IAAO,KAASA,EAAI,IAC1CR,EAAK7E,IAAIqF,GACjB,OAAOR,GAMPU,CAAW,UAACC,aAAaC,QAAQxB,UAAtB,QAA0C,SADzD,mBAAOyB,EAAP,KAAqBC,EAArB,KAQA,OALyC,IAArChG,OAAOyC,KAAKsD,GAAcrD,QAAgBmD,aAAaC,QAAQxB,MAC/DuB,aAAaI,QAAQ3B,EArF7B,SAAmByB,GAGf,IAFA,IAAMrF,EAAqC,GAE3C,MAAwBV,OAAOe,QAAQgF,GAAvC,eAAsD,CAAjD,0BAAKpG,EAAL,KAASlB,EAAT,KACDiC,EAAOf,GAAM,CACT1C,KAAMwB,EAAMxB,KACZ2B,MAAOzB,YAAOsB,EAAMG,MAAO,YAC3BI,MAAOP,EAAMO,MACbK,aAAcZ,EAAMY,aACpB5B,QAASyI,EAAazH,EAAMhB,UAIpC,OAAOqH,KAAKqB,UAAUzF,GAEtB,SAASwF,EAAahB,GAClB,IADkD,EAC9CI,EAAQ,IAAI/C,WAAW,GADuB,cAElC2C,GAFkC,IAElD,2BAAsB,CAAC,IAAdkB,EAAa,QACZC,EAAOjB,KAAKO,MAAMS,EAAM,IAC9Bd,EAAQgB,EAAOhB,EAAOe,IAChBA,IAAS,KAASD,EAAM,GALgB,8BAOlD,OAAOhE,YAAOkD,EAAM9C,QACf+D,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAGxB,SAASD,EAAOhB,EAAmBkB,GAE/B,IADA,IAAI9D,EAAS4C,EAAM5C,OACZ8D,GAAS9D,GAAQ8D,GAAS,EACjC,GAAI9D,IAAW4C,EAAM5C,OAAQ,OAAO4C,EACpC,IAAMmB,EAAW,IAAIlE,WAAWG,GAEhC,OADA+D,EAAStF,IAAImE,GACNmB,GAoD+BC,CAAUX,IAChDlD,QAAQC,IAAI,UAGT,qCACH,cAAC6D,EAAA,EAAD,IACA,2KACA,mMACA,mJACA,4BAAG,iFACH,4BACI,uFAEQ,mBAAGC,KAAM,+DAAT,+BAFR,iCAGgC,mBAAGA,KAAM,6CAAT,oBAHhC,SAIQ,mBAAGA,KAAM,2BAAT,gCAJR,+CAQJ,cAAC,EAAD,CACI1G,KAAM6F,EACNlG,QAASmG,QC9GNa,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.be2e0197.chunk.js","sourcesContent":["import React from \"react\";\nimport {addDays, compareAsc, compareDesc, endOfDay, format, startOfDay} from \"date-fns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DateAdapter from \"@mui/lab/AdapterDateFns\";\nimport jaLocale from \"date-fns/locale/ja\";\nimport EditIcon from '@mui/icons-material/Edit';\nimport Button from \"@mui/material/Button\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TextField from \"@mui/material/TextField\";\nimport {DatePicker} from \"@mui/lab\";\nimport \"./AnimeTable.css\";\nimport {encode} from \"base64-arraybuffer\";\n\nexport type AllAnimeInfo = Record<string, AnimeInfo>\n\ninterface AnimeInfo {\n    name: string,\n    start: Date,\n    first: number,\n    intervalDays: number,\n    watched: Set<number>,\n}\n\ninterface SingleAnimeProps {\n    number: number,\n    available: Date,\n    animeInfo: AnimeInfo,\n    updateAnimeInfo: (update: Partial<AnimeInfo>) => void,\n    watched: boolean,\n    markWatched: (watched: boolean) => void,\n    delete: () => void,\n}\n\ninterface SingleAnimeNumber {\n    type: 'anime',\n    id: string,\n    index: number,\n    available: Date,\n    info: AnimeInfo,\n    watched: boolean\n}\n\ninterface TodayDividerMarker {\n    type: 'today-marker',\n    available: Date,\n}\n\ninterface AnimeTableState {\n    showAll: boolean,\n}\n\ninterface AnimeTableProps {\n    info: AllAnimeInfo,\n    setInfo: (updater: (old: Readonly<AllAnimeInfo>) => AllAnimeInfo) => void,\n}\n\nclass AnimeTable extends React.Component<AnimeTableProps, AnimeTableState> {\n    constructor(props: AnimeTableProps) {\n        super(props);\n        this.state = {\n            showAll: false,\n        }\n    }\n\n    deleteAnime(id: string) {\n        this.props.setInfo((old) => {\n            const newObj = Object.assign({} as AllAnimeInfo, old);\n            delete newObj[id];\n            return newObj;\n        });\n    }\n\n    updateAnimeInfo(id: string, info: Partial<AnimeInfo>) {\n        this.props.setInfo((old) => {\n            if (old[id] == null) return old\n            return {\n                ...old,\n                [id]: Object.assign(old[id], info),\n            }\n        });\n    }\n\n    markWatched(id: string, number: number, watched: boolean) {\n        this.props.setInfo((old) => {\n            if (old[id] == null) return old\n            const animeInfo = old[id];\n            const alreadyWatched = animeInfo.watched.has(number);\n            if (watched === alreadyWatched) return old\n            if (watched)\n                animeInfo.watched.add(number)\n            else\n                animeInfo.watched.delete(number)\n            return {\n                ...old,\n                [id]: animeInfo,\n            }\n        });\n    }\n\n    static sortAnime(array: { available: Date }[]) {\n        array.sort((a, b) => compareDesc(a.available, b.available));\n    }\n\n    computeAnimeNumbers(): Record<string, SingleAnimeNumber[]> {\n        const today = endOfDay(new Date());\n        const anime = this.props.info;\n        const result: Record<string, SingleAnimeNumber[]> = Object.create(null)\n\n        function computeAvailableDate(index: number, info: AnimeInfo): Date {\n            return addDays(info.start, index * info.intervalDays);\n        }\n\n        for (let [id, info] of Object.entries(anime)) {\n            const map = new Map<number, SingleAnimeNumber>();\n            const theDayNextWillBeReleased = addDays(today, info.intervalDays);\n\n            for (const index of info.watched) {\n                map.set(index, {\n                    id, index, info,\n                    type: \"anime\",\n                    available: computeAvailableDate(index, info),\n                    watched: true\n                })\n            }\n\n            const array: SingleAnimeNumber[] = Array.from(map.values());\n\n            for (let index = 0; ; index++) {\n                const available = computeAvailableDate(index, info)\n                if (compareAsc(available, theDayNextWillBeReleased) > 0) break;\n                if (map.has(index)) continue;\n                array.push({\n                    id, index, info, available,\n                    type: \"anime\",\n                    watched: false,\n                })\n            }\n            AnimeTable.sortAnime(array);\n\n            result[id] = array;\n        }\n        return result\n    }\n\n    // AnimeNumbers which one of:\n    //    not watched\n    //    the latest\n    //    the next\n    // will be returned\n    computeNotWatchedAnime(): (SingleAnimeNumber | TodayDividerMarker)[] {\n        const allNumbers = this.computeAnimeNumbers();\n        const shown: (SingleAnimeNumber | TodayDividerMarker)[] = [];\n        for (let numbers of Object.values(allNumbers)) {\n            for (const animeNumber of numbers) {\n                if (!animeNumber.watched) {\n                    shown.push(animeNumber)\n                }\n            }\n            if (numbers[0]?.watched) shown.push(numbers[0])\n            if (numbers[1]?.watched) shown.push(numbers[1])\n        }\n        shown.push(AnimeTable.todayAnimeMarker());\n        AnimeTable.sortAnime(shown);\n        return shown\n    }\n\n    computeAllAnime(): (SingleAnimeNumber | TodayDividerMarker)[] {\n        const allNumbers = this.computeAnimeNumbers();\n        const shown: (SingleAnimeNumber | TodayDividerMarker)[] = Object.values(allNumbers).flatMap(it => it);\n        shown.push(AnimeTable.todayAnimeMarker());\n        AnimeTable.sortAnime(shown);\n        return shown\n    }\n\n    private static todayAnimeMarker(): TodayDividerMarker {\n        const today = endOfDay(new Date());\n        return {\n            type: 'today-marker',\n            available: today,\n        }\n    }\n\n    addNewAnime() {\n        // util: random id gen\n        this.props.setInfo((old) => {\n            let id: string\n            do id = randomStr()\n            while (old[id] != null);\n\n            return {\n                ...old,\n                [id]: {\n                    name: `アニメ${Object.keys(old).length + 1}`,\n                    start: startOfDay(new Date()),\n                    first: 1,\n                    intervalDays: 7,\n                    watched: new Set(),\n                },\n            }\n        });\n        function randomStr(): string {\n            return encode(crypto.getRandomValues(new Uint8Array(9)).buffer)\n        }\n    }\n\n    render() {\n        console.log(this.props.info);\n\n        const allAnimeNumbers = this.state.showAll\n            ? this.computeAllAnime()\n            : this.computeNotWatchedAnime();\n\n        return <>\n            <LocalizationProvider dateAdapter={DateAdapter} locale={jaLocale}>\n                <div className={\"AnimeTable\"}>\n                    <FormControlLabel\n                        control={<Switch\n                            checked={this.state.showAll}\n                            onChange={(_, all) => this.setState({showAll: all})}\n                        />}\n                        label={\"すべて表示\"}\n                    />\n                    <Table size={\"small\"}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell/>\n                                <TableCell>アニメ</TableCell>\n                                <TableCell>話数</TableCell>\n                                <TableCell>放送日</TableCell>\n                                <TableCell>視聴済み</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {allAnimeNumbers.map(animeNumber => {\n                                if (animeNumber.type === 'today-marker') {\n                                    return <TodayDivider key={`today-marker`}/>;\n                                } else {\n                                    return <SingleAnime\n                                        key={`${animeNumber.id}-${animeNumber.index}`}\n                                        number={animeNumber.index + animeNumber.info.first}\n                                        available={animeNumber.available}\n                                        animeInfo={animeNumber.info}\n                                        updateAnimeInfo={this.updateAnimeInfo.bind(this, animeNumber.id)}\n                                        watched={animeNumber.watched}\n                                        markWatched={this.markWatched.bind(this, animeNumber.id, animeNumber.index)}\n                                        delete={this.deleteAnime.bind(this, animeNumber.id)}\n                                    />;\n                                }\n                            })}\n                        </TableBody>\n                    </Table>\n                    <Button onClick={this.addNewAnime.bind(this)}>+</Button>\n                </div>\n            </LocalizationProvider>\n        </>\n    }\n}\n\nfunction TodayDivider() {\n    return <TableRow>\n        <TableCell colSpan={7}>\n            <div className={\"TodayMarker\"}>\n                今日\n            </div>\n        </TableCell>\n    </TableRow>\n}\n\nfunction SingleAnime(props: SingleAnimeProps) {\n    const [open, setOpen] = React.useState(false);\n    const [deleteDialog, setDeleteDialog] = React.useState(false);\n\n    return <TableRow>\n        <TableCell className={\"EditButton\"}>\n            <Button\n                className={\"MinWidth\"}\n                onClick={() => setOpen(true)}\n            >\n                <EditIcon/>\n            </Button>\n        </TableCell>\n        <TableCell>{props.animeInfo.name}</TableCell>\n        <TableCell>{props.number}話</TableCell>\n        <TableCell>{format(props.available, \"yyyy/MM/dd\")}</TableCell>\n        <TableCell>\n            <FormControlLabel control={<Checkbox\n                checked={props.watched}\n                onChange={(e) => props.markWatched(e.target.checked)}\n            />} label={\"視聴済み\"}/>\n        </TableCell>\n        <Dialog open={open}>\n            <DialogTitle>Edit {props.animeInfo.name}</DialogTitle>\n            <DialogContent>\n                <FormControl\n                    sx={{'& > :not(style)': { m: 1, width: '25ch' }}}\n                >\n                    <TextField\n                        size={\"small\"}\n                        fullWidth\n                        label={\"名前\"}\n                        value={props.animeInfo.name}\n                        onChange={(e) =>\n                            props.updateAnimeInfo({name: e.target.value})}\n                    />\n                    <DatePicker\n                        onChange={(start) => props.updateAnimeInfo({start: start!})}\n                        mask={\"____/__/__\"}\n                        value={props.animeInfo.start}\n                        renderInput={(params) => <TextField\n                            {...params}\n                            size={\"small\"}\n                            fullWidth\n                            label={\"初回放送日\"}\n                        />}\n                    />\n                    <TextField\n                        size={\"small\"}\n                        fullWidth\n                        label={\"初回\"}\n                        value={props.animeInfo.first}\n                        onChange={(e) =>\n                            props.updateAnimeInfo({first: Number(e.target.value)})}\n                        inputProps={{\n                            inputMode: \"numeric\",\n                            pattern: \"[0-9]*\"\n                        }}\n                    />\n                    <TextField\n                        size={\"small\"}\n                        fullWidth\n                        label={\"隔日\"}\n                        value={props.animeInfo.intervalDays}\n                        onChange={(e) =>\n                            props.updateAnimeInfo({intervalDays: Number(e.target.value)})}\n                        inputProps={{\n                            inputMode: \"numeric\",\n                            pattern: \"[0-9]*\"\n                        }}\n                    />\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setDeleteDialog(true)}>\n                    削除\n                </Button>\n                <Button onClick={() => setOpen(false)}>\n                    閉じる\n                </Button>\n                <Dialog open={deleteDialog}>\n                    <DialogTitle>{props.animeInfo.name}を削除しますか？</DialogTitle>\n                    <DialogActions>\n                        <Button onClick={() => props.delete()}>\n                            削除\n                        </Button>\n                        <Button onClick={() => setOpen(false)}>\n                            キャンセル\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </DialogActions>\n        </Dialog>\n    </TableRow>\n}\n\nexport default AnimeTable;\n","import React from 'react';\nimport AnimeTable, {AllAnimeInfo} from \"./AnimeTable\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {format, parse, startOfDay} from \"date-fns\";\nimport {decode, encode} from \"base64-arraybuffer\";\n\nconst localStorageKey = \"all-anime-info\"\n\ntype Serialized = {\n    name: string;\n    start: string;\n    first: number;\n    intervalDays: number;\n    watched: string;\n}\n\nconst todayStart = startOfDay(new Date());\n\nfunction serialize(allAnimeInfo: AllAnimeInfo) {\n    const result: Record<string, Serialized> = {}\n\n    for (let [id, value] of Object.entries(allAnimeInfo)) {\n        result[id] = {\n            name: value.name,\n            start: format(value.start, \"yyyyMMdd\"),\n            first: value.first,\n            intervalDays: value.intervalDays,\n            watched: bitsToString(value.watched),\n        }\n    }\n\n    return JSON.stringify(result);\n\n    function bitsToString(bits: Iterable<number>): string {\n        let bytes = new Uint8Array(2);\n        for (let bit of bits) {\n            const byte = Math.floor(bit / 8);\n            bytes = resize(bytes, byte);\n            bytes[byte] |= 0x80 >> (bit % 8);\n        }\n        return encode(bytes.buffer)\n            .replace(/=*$/, '')\n            .replace(/A*$/, '')\n    }\n\n    function resize(bytes: Uint8Array, least: number): Uint8Array {\n        let length = bytes.length;\n        while (least >= length) least *= 2\n        if (length === bytes.length) return bytes\n        const newArray = new Uint8Array(length);\n        newArray.set(bytes);\n        return newArray;\n    }\n}\n\nconst isInt = (value: any): value is number => typeof value == \"number\" && Number.isSafeInteger(value);\nconst isString = (value: any): value is string => typeof value == \"string\";\n\nfunction deserialize(text: string): AllAnimeInfo {\n    try {\n        const serialized: any = JSON.parse(text);\n        const result: AllAnimeInfo = {}\n\n        for (let [id, value] of Object.entries<any>(serialized)) {\n            if (isString(value.name)\n                && isString(value.start)\n                && isInt(value.first)\n                && isInt(value.intervalDays)\n                && isString(value.watched)) {\n                result[id] = {\n                    name: value.name,\n                    start: parse(value.start, \"yyyyMMdd\", todayStart),\n                    first: value.first,\n                    intervalDays: value.intervalDays,\n                    watched: stringToBits(value.watched),\n                }\n            }\n        }\n\n        return result\n    } catch (e) {\n        console.error(e);\n        return {}\n    }\n\n    function stringToBits(text: string): Set<number> {\n        const bits = new Set<number>();\n        const paddedLen = Math.ceil(text.length / 4) * 4;\n        let bytes = new Uint8Array(decode(text.padEnd(paddedLen, 'A')));\n        const bitCnt = bytes.length * 8;\n\n        for (let i = 0; i < bitCnt; i++)\n            if ((bytes[Math.floor(i / 8)] & (0x80 >> (i % 8))) !== 0)\n                bits.add(i)\n        return bits\n    }\n}\n\nfunction App() {\n    const [allAnimeInfo, setAllAnimeInfo] = React.useState<AllAnimeInfo>(() =>\n        deserialize(localStorage.getItem(localStorageKey) ?? \"{}\"))\n\n    if (Object.keys(allAnimeInfo).length !== 0 || localStorage.getItem(localStorageKey)) {\n        localStorage.setItem(localStorageKey, serialize(allAnimeInfo))\n        console.log(\"saved\")\n    }\n\n    return <>\n        <CssBaseline/>\n        <p>アニメやドラマを何話まで見たかを管理するツール</p>\n        <p>ニコニコのような一週間無料公開なもの向けに作りました。</p>\n        <p>ブラウザに入力した情報が保存されます。</p>\n        <p><small>&copy; anatawa12 and other contributors 2021</small></p>\n        <p>\n            <small>\n                This software is published under MIT License.\n                See <a href={\"https://github.com/anatawa12/anime-manager/tree/HEAD/LICENSE\"}>LICENSE on GitHub</a>.\n                You can see project page on <a href={\"https://github.com/anatawa12/anime-manager\"}>GitHub</a>.\n                See <a href={\"./license-disclaimer.txt\"}>license-disclaimer</a> for licenses of\n                third-pretty software.\n            </small>\n        </p>\n        <AnimeTable\n            info={allAnimeInfo}\n            setInfo={setAllAnimeInfo}\n        />\n    </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}