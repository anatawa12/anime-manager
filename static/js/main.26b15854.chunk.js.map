{"version":3,"sources":["AnimeTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodayDivider","TableRow","TableCell","colSpan","className","SingleAnime","props","TextField","size","fullWidth","value","animeInfo","name","onChange","e","updateAnimeInfo","target","number","format","available","FormControlLabel","control","Checkbox","checked","watched","markWatched","label","DatePicker","start","mask","renderInput","params","style","width","first","Number","inputProps","inputMode","pattern","intervalDays","AnimeTable","state","showAll","id","info","this","setInfo","old","Object","assign","alreadyWatched","has","add","delete","today","endOfDay","Date","anime","result","create","computeAvailableDate","index","addDays","entries","map","Map","theDayNextWillBeReleased","set","type","array","Array","from","values","compareAsc","push","sortAnime","allNumbers","computeAnimeNumbers","shown","numbers","animeNumber","todayAnimeMarker","flatMap","it","encode","crypto","getRandomValues","Uint8Array","buffer","keys","length","startOfDay","Set","console","log","allAnimeNumbers","computeAllAnime","computeNotWatchedAnime","LocalizationProvider","dateAdapter","DateAdapter","locale","jaLocale","Switch","_","all","setState","Table","TableHead","TableBody","bind","Button","onClick","addNewAnime","sort","a","b","compareDesc","React","Component","localStorageKey","todayStart","isInt","isSafeInteger","isString","App","useState","text","serialized","JSON","parse","stringToBits","error","bits","paddedLen","Math","ceil","bytes","decode","padStart","bitCnt","i","floor","deserialize","localStorage","getItem","allAnimeInfo","setAllAnimeInfo","setItem","bitsToString","stringify","bit","byte","resize","replace","least","newArray","serialize","CssBaseline","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26b15854.chunk.js","sourcesContent":["import React from \"react\";\nimport {addDays, compareAsc, compareDesc, endOfDay, format, startOfDay} from \"date-fns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DateAdapter from \"@mui/lab/AdapterDateFns\";\nimport jaLocale from \"date-fns/locale/ja\";\nimport {\n    Button, Checkbox,\n    FormControlLabel,\n    Switch,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TextField\n} from \"@mui/material\";\nimport {DatePicker} from \"@mui/lab\";\nimport \"./AnimeTable.css\";\nimport {encode} from \"base64-arraybuffer\";\n\nexport type AllAnimeInfo = Record<string, AnimeInfo>\n\ninterface AnimeInfo {\n    name: string,\n    start: Date,\n    first: number,\n    intervalDays: number,\n    watched: Set<number>,\n}\n\ninterface SingleAnimeProps {\n    number: number,\n    available: Date,\n    animeInfo: AnimeInfo,\n    updateAnimeInfo: (update: Partial<AnimeInfo>) => void,\n    watched: boolean,\n    markWatched: (watched: boolean) => void,\n}\n\ninterface SingleAnimeNumber {\n    type: 'anime',\n    id: string,\n    index: number,\n    available: Date,\n    info: AnimeInfo,\n    watched: boolean\n}\n\ninterface TodayDividerMarker {\n    type: 'today-marker',\n    available: Date,\n}\n\ninterface AnimeTableState {\n    showAll: boolean,\n}\n\ninterface AnimeTableProps {\n    info: AllAnimeInfo,\n    setInfo: (updater: (old: Readonly<AllAnimeInfo>) => AllAnimeInfo) => void,\n}\n\nclass AnimeTable extends React.Component<AnimeTableProps, AnimeTableState> {\n    constructor(props: AnimeTableProps) {\n        super(props);\n        this.state = {\n            showAll: false,\n        }\n    }\n\n    updateAnimeInfo(id: string, info: Partial<AnimeInfo>) {\n        this.props.setInfo((old) => {\n            if (old[id] == null) return old\n            return {\n                ...old,\n                [id]: Object.assign(old[id], info),\n            }\n        });\n    }\n\n    markWatched(id: string, number: number, watched: boolean) {\n        this.props.setInfo((old) => {\n            if (old[id] == null) return old\n            const animeInfo = old[id];\n            const alreadyWatched = animeInfo.watched.has(number);\n            if (watched === alreadyWatched) return old\n            if (watched)\n                animeInfo.watched.add(number)\n            else\n                animeInfo.watched.delete(number)\n            return {\n                ...old,\n                [id]: animeInfo,\n            }\n        });\n    }\n\n    static sortAnime(array: { available: Date }[]) {\n        array.sort((a, b) => compareDesc(a.available, b.available));\n    }\n\n    computeAnimeNumbers(): Record<string, SingleAnimeNumber[]> {\n        const today = endOfDay(new Date());\n        const anime = this.props.info;\n        const result: Record<string, SingleAnimeNumber[]> = Object.create(null)\n\n        function computeAvailableDate(index: number, info: AnimeInfo): Date {\n            return addDays(info.start, index * info.intervalDays);\n        }\n\n        for (let [id, info] of Object.entries(anime)) {\n            const map = new Map<number, SingleAnimeNumber>();\n            const theDayNextWillBeReleased = addDays(today, info.intervalDays);\n\n            for (const index of info.watched) {\n                map.set(index, {\n                    id, index, info,\n                    type: \"anime\",\n                    available: computeAvailableDate(index, info),\n                    watched: true\n                })\n            }\n\n            const array: SingleAnimeNumber[] = Array.from(map.values());\n\n            for (let index = 0; ; index++) {\n                const available = computeAvailableDate(index, info)\n                if (compareAsc(available, theDayNextWillBeReleased) > 0) break;\n                if (map.has(index)) continue;\n                array.push({\n                    id, index, info, available,\n                    type: \"anime\",\n                    watched: false,\n                })\n            }\n            AnimeTable.sortAnime(array);\n\n            result[id] = array;\n        }\n        return result\n    }\n\n    // AnimeNumbers which one of:\n    //    not watched\n    //    the latest\n    //    the next\n    // will be returned\n    computeNotWatchedAnime(): (SingleAnimeNumber | TodayDividerMarker)[] {\n        const allNumbers = this.computeAnimeNumbers();\n        const shown: (SingleAnimeNumber | TodayDividerMarker)[] = [];\n        for (let numbers of Object.values(allNumbers)) {\n            for (const animeNumber of numbers) {\n                if (!animeNumber.watched) {\n                    shown.push(animeNumber)\n                }\n            }\n            if (numbers[0]?.watched) shown.push(numbers[0])\n            if (numbers[1]?.watched) shown.push(numbers[1])\n        }\n        shown.push(AnimeTable.todayAnimeMarker());\n        AnimeTable.sortAnime(shown);\n        return shown\n    }\n\n    computeAllAnime(): (SingleAnimeNumber | TodayDividerMarker)[] {\n        const allNumbers = this.computeAnimeNumbers();\n        const shown: (SingleAnimeNumber | TodayDividerMarker)[] = Object.values(allNumbers).flatMap(it => it);\n        shown.push(AnimeTable.todayAnimeMarker());\n        AnimeTable.sortAnime(shown);\n        return shown\n    }\n\n    private static todayAnimeMarker(): TodayDividerMarker {\n        const today = endOfDay(new Date());\n        return {\n            type: 'today-marker',\n            available: today,\n        }\n    }\n\n    addNewAnime() {\n        // util: random id gen\n        this.props.setInfo((old) => {\n            let id: string\n            do id = randomStr()\n            while (old[id] != null);\n\n            return {\n                ...old,\n                [id]: {\n                    name: `アニメ${Object.keys(old).length + 1}`,\n                    start: startOfDay(new Date()),\n                    first: 1,\n                    intervalDays: 7,\n                    watched: new Set(),\n                },\n            }\n        });\n        function randomStr(): string {\n            return encode(crypto.getRandomValues(new Uint8Array(9)).buffer)\n        }\n    }\n\n    render() {\n        console.log(this.props.info);\n\n        const allAnimeNumbers = this.state.showAll\n            ? this.computeAllAnime()\n            : this.computeNotWatchedAnime();\n\n        return <>\n            <LocalizationProvider dateAdapter={DateAdapter} locale={jaLocale}>\n                <FormControlLabel\n                    control={<Switch\n                        checked={this.state.showAll}\n                        onChange={(_, all) => this.setState({showAll: all})}\n                    />}\n                    label={\"すべて表示\"}\n                />\n                <Table size={\"small\"}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>アニメ</TableCell>\n                            <TableCell>話数</TableCell>\n                            <TableCell>放送日</TableCell>\n                            <TableCell>視聴済み</TableCell>\n                            <TableCell>初回放送日</TableCell>\n                            <TableCell>初回</TableCell>\n                            <TableCell>隔日</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {allAnimeNumbers.map(animeNumber => {\n                            if (animeNumber.type === 'today-marker') {\n                                return <TodayDivider key={`today-marker`}/>;\n                            } else {\n                                return <SingleAnime\n                                    key={`${animeNumber.id}-${animeNumber.index}`}\n                                    number={animeNumber.index + animeNumber.info.first}\n                                    available={animeNumber.available}\n                                    animeInfo={animeNumber.info}\n                                    updateAnimeInfo={this.updateAnimeInfo.bind(this, animeNumber.id)}\n                                    watched={animeNumber.watched}\n                                    markWatched={this.markWatched.bind(this, animeNumber.id, animeNumber.index)}\n                                />;\n                            }\n                        })}\n                    </TableBody>\n                </Table>\n                <Button onClick={this.addNewAnime.bind(this)}>+</Button>\n            </LocalizationProvider>\n        </>\n    }\n}\n\nfunction TodayDivider() {\n    return <TableRow>\n        <TableCell colSpan={7}>\n            <div className={\"TodayMarker\"}>\n                今日\n            </div>\n        </TableCell>\n    </TableRow>\n}\n\nfunction SingleAnime(props: SingleAnimeProps) {\n    return <TableRow>\n        <TableCell>\n            <TextField\n                size={\"small\"}\n                fullWidth\n                value={props.animeInfo.name}\n                onChange={(e) =>\n                    props.updateAnimeInfo({name: e.target.value})}\n            />\n        </TableCell>\n        <TableCell>{props.number}話</TableCell>\n        <TableCell>{format(props.available, \"yyyy/MM/dd\")}</TableCell>\n        <TableCell>\n            <FormControlLabel control={<Checkbox\n                checked={props.watched}\n                onChange={(e) => props.markWatched(e.target.checked)}\n            />} label={\"視聴済み\"}/>\n        </TableCell>\n        <TableCell>\n            <DatePicker\n                onChange={(start) => props.updateAnimeInfo({start: start!})}\n                mask={\"____/__/__\"}\n                value={props.animeInfo.start}\n                renderInput={(params) => <TextField\n                    {...params}\n                    style={{width: \"150px\"}}\n                    size={\"small\"}\n                />}\n            />\n        </TableCell>\n        <TableCell>\n            <TextField\n                size={\"small\"}\n                style={{width: \"100px\"}}\n                value={props.animeInfo.first}\n                onChange={(e) =>\n                    props.updateAnimeInfo({first: Number(e.target.value)})}\n                inputProps={{\n                    inputMode: \"numeric\",\n                    pattern: \"[0-9]*\"\n                }}\n            />\n        </TableCell>\n        <TableCell>\n            <TextField\n                size={\"small\"}\n                style={{width: \"100px\"}}\n                value={props.animeInfo.intervalDays}\n                onChange={(e) =>\n                    props.updateAnimeInfo({intervalDays: Number(e.target.value)})}\n                inputProps={{\n                    inputMode: \"numeric\",\n                    pattern: \"[0-9]*\"\n                }}\n            />\n        </TableCell>\n    </TableRow>\n}\n\nexport default AnimeTable;\n","import React from 'react';\nimport AnimeTable, {AllAnimeInfo} from \"./AnimeTable\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {format, parse, startOfDay} from \"date-fns\";\nimport {decode, encode} from \"base64-arraybuffer\";\n\nconst localStorageKey = \"all-anime-info\"\n\ntype Serialized = {\n    name: string;\n    start: string;\n    first: number;\n    intervalDays: number;\n    watched: string;\n}\n\nconst todayStart = startOfDay(new Date());\n\nfunction serialize(allAnimeInfo: AllAnimeInfo) {\n    const result: Record<string, Serialized> = {}\n\n    for (let [id, value] of Object.entries(allAnimeInfo)) {\n        result[id] = {\n            name: value.name,\n            start: format(value.start, \"yyyyMMdd\"),\n            first: value.first,\n            intervalDays: value.intervalDays,\n            watched: bitsToString(value.watched),\n        }\n    }\n\n    return JSON.stringify(result);\n\n    function bitsToString(bits: Iterable<number>): string {\n        let bytes = new Uint8Array(2);\n        for (let bit of bits) {\n            const byte = Math.floor(bit / 8);\n            bytes = resize(bytes, byte);\n            bytes[byte] |= 0x80 >> (bit % 8);\n        }\n        return encode(bytes.buffer)\n            .replace(/^A*/, '')\n            .replace(/=*$/, '')\n    }\n\n    function resize(bytes: Uint8Array, least: number): Uint8Array {\n        let length = bytes.length;\n        while (least >= length) least *= 2\n        if (length === bytes.length) return bytes\n        const newArray = new Uint8Array(length);\n        newArray.set(bytes);\n        return newArray;\n    }\n}\n\nconst isInt = (value: any): value is number => typeof value == \"number\" && Number.isSafeInteger(value);\nconst isString = (value: any): value is string => typeof value == \"string\";\n\nfunction deserialize(text: string): AllAnimeInfo {\n    try {\n        const serialized: any = JSON.parse(text);\n        const result: AllAnimeInfo = {}\n\n        for (let [id, value] of Object.entries<any>(serialized)) {\n            if (isString(value.name)\n                && isString(value.start)\n                && isInt(value.first)\n                && isInt(value.intervalDays)\n                && isString(value.watched)) {\n                result[id] = {\n                    name: value.name,\n                    start: parse(value.start, \"yyyyMMdd\", todayStart),\n                    first: value.first,\n                    intervalDays: value.intervalDays,\n                    watched: stringToBits(value.watched),\n                }\n            }\n        }\n\n        return result\n    } catch (e) {\n        console.error(e);\n        return {}\n    }\n\n    function stringToBits(text: string): Set<number> {\n        const bits = new Set<number>();\n        const paddedLen = Math.ceil(text.length / 4) * 4;\n        let bytes = new Uint8Array(decode(text.padStart(paddedLen, 'A')));\n        const bitCnt = bytes.length * 8;\n\n        for (let i = 0; i < bitCnt; i++)\n            if ((bytes[Math.floor(i / 8)] & (0x80 >> (i % 8))) !== 0)\n                bits.add(i)\n        return bits\n    }\n}\n\nfunction App() {\n    const [allAnimeInfo, setAllAnimeInfo] = React.useState<AllAnimeInfo>(() => \n        deserialize(localStorage.getItem(localStorageKey) ?? \"{}\"))\n\n    if (Object.keys(allAnimeInfo).length !== 0 || localStorage.getItem(localStorageKey)){\n        localStorage.setItem(localStorageKey, serialize(allAnimeInfo))\n        console.log(\"saved\")\n    }\n\n    return <>\n        <CssBaseline/>\n        <p>アニメやドラマを何話まで見たかを管理するツール</p>\n        <p>ニコニコのような一週間無料公開なもの向けに作りました。</p>\n        <p>ブラウザに入力した情報が保存されます。</p>\n        <p>\n            <small>&copy; anatawa12 and other contributors 2021</small>\n            This software is published under MIT License.\n            See <a href={\"https://github.com/anatawa12/anime-manager/tree/HEAD/LICENSE\"}>LICENSE on GitHub</a>.\n            You can see project page on <a href={\"https://github.com/anatawa12/anime-manager\"}>GitHub</a>.\n            See <a href={\"./license-disclaimer.txt\"}>license-disclaimer</a> for licenses of \n            third-pretty software.\n        </p>\n        <AnimeTable\n            info={allAnimeInfo}\n            setInfo={setAllAnimeInfo}\n        />\n    </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}